Object subclass: #OOPObject	instanceVariableNames: 'superclassInstances'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!OOPObject methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 16:11'!initialize	^self initializeSupers postInitialize! !!OOPObject methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 16:11'!initializeSupers	superclassInstances := Array new.	(self superclasses) do: [:parent | superclassInstances add: ((parent parentClass) new)]! !!OOPObject methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 16:10'!postInitialize	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OOPObject class	instanceVariableNames: 'superclasses'!!OOPObject class methodsFor: 'class initialization' stamp: 'L&M 5/24/2019 18:02'!classifyInheritedMethod: aSymbol	|answers counter ans|	answers := Array new.	(self superclasses) do: [:parent| |st| st := (parent parentClass classifyInheritedMethodAux: aSymbol).			(st = 'undefined') ifTrue: [answers add: 'undefined'].			(st = 'found') ifTrue: [answers add: (parent inheritanceType)].			(st = 'private') ifTrue: [answers add: 'inaccessible'].			(st = 'public') ifTrue: [answers add: (parent inheritanceType)].			(st = 'protected') ifTrue: [answers add: (parent inheritanceType)].			(st = 'inaccessible') ifTrue: [answers add: 'inaccessible'].			(st = 'ambiguous') ifTrue: [answers add: 'ambiguous']].	(answers includes: 'ambiguous') ifTrue: [^'ambiguous'].	counter := 0.	(answers do: [:st | (st ~= 'undefined') ifTrue: [counter := counter + 1]]).	(counter > 1) ifTrue: [^'ambiguous'].	(counter = 0) ifTrue: [^'undefined'].	ans := answers select: [:st| st ~= 'undefined'].	^(ans atWrap: 0)! !!OOPObject class methodsFor: 'class initialization' stamp: 'L&M 5/24/2019 17:43'!classifyInheritedMethodAux: aSymbol	(self superclasses isEmpty)		ifTrue: [(self includesSelector: aSymbol)					ifTrue: [^'found']					ifFalse: [^'undefined']]		ifFalse: [|answers counter ans| answers := Array new.			self superclasses do:			[:parent | |st| st := (parent parentClass classifyInheritedMethodAux: aSymbol).			(st = 'undefined') ifTrue: [answers add: 'undefined'].			(st = 'found') ifTrue: [answers add: (parent inheritanceType)].			(st = 'private') ifTrue: [answers add: 'inaccessible'].			(st = 'public') ifTrue: [answers add: (parent inheritanceType)].			(st = 'protected') ifTrue: [answers add: (parent inheritanceType)].			(st = 'inaccessible') ifTrue: [answers add: 'inaccessible'].			(st = 'ambiguous') ifTrue: [answers add: 'ambiguous']].			(answers includes: 'ambiguous') ifTrue: [^'ambiguous'].			counter := 0.			(answers do: [:st | (st ~= 'undefined') ifTrue: [counter := counter + 1]]).			(counter > 1) ifTrue: [^'ambiguous'].			(counter = 0) ifTrue: [^'undefined'].			ans := answers select: [:st| st ~= 'undefined'].			(self includesSelector: aSymbol) ifTrue: [^'found'] ifFalse: [^(ans atWrap: 0)]].! !!OOPObject class methodsFor: 'class initialization' stamp: 'L&M 5/24/2019 16:09'!multInheritsFrom: aClass	(self superclasses isEmpty)		ifTrue: [^false].	(self superclasses) do: [:m | (m parentClass == aClass)		ifTrue: [^true]].	(self superclasses) do: [:m | (m multInheritsFrom: aClass) ifTrue: [^true]].	^false.! !!OOPObject class methodsFor: 'class initialization' stamp: 'L&M 5/24/2019 15:48'!subclass: aSubclassName instanceVariableNames: instVarNamesclassVariableNames: classVarNames poolDictionaries: poolDictionariescategory: aCategoryName	^ self subclass: aSubclassName parentClasses: (Array new)	instanceVariableNames: instVarNames classVariableNames: classVarNames	poolDictionaries: poolDictionaries category: aCategoryName! !!OOPObject class methodsFor: 'class initialization' stamp: 'L&M 5/24/2019 15:37'!subclass: aSubclassName parentClasses: anArray instanceVariableNames:instVarNames classVariableNames: classVarNames poolDictionaries:poolDictionaries category: aCategoryName	| cl ar|	cl := (ClassBuilder new)		superclass: OOPObject		subclass: aSubclassName		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: poolDictionaries		category: aCategoryName.	ar := Array new.	(self ~~ OOPObject)		ifTrue: [|parent| parent := OOPParent new. parent parentClass: self.			parent inheritanceType: 'public'. ar add: parent].	ar addAll: anArray.	cl instVarNamed: superclasses put: ar.	^ cl	! !!OOPObject class methodsFor: 'class initialization' stamp: 'L&M 5/24/2019 15:16'!superclasses	^superclasses! !!OOPObject class methodsFor: 'class initialization' stamp: 'L&M 5/24/2019 16:14'!throwSender: senderName fails: methodName inClass: receiverName because: reason	| str |	str := senderName, ' cannot send ',methodName asString,' to ',receiverName,' because: '	,reason.	AssertionFailure signal: str.! !Object subclass: #OOPParent	instanceVariableNames: 'parentClass inheritanceType'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!OOPParent methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 14:42'!inheritanceType	^ inheritanceType! !!OOPParent methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 14:44'!inheritanceType: aString	inheritanceType := aString! !!OOPParent methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 14:42'!initialize	parentClass := Object.	inheritanceType := 'public'! !!OOPParent methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 14:42'!parentClass	^ parentClass! !!OOPParent methodsFor: 'initialize-release' stamp: 'L&M 5/24/2019 14:43'!parentClass: aClass	parentClass := aClass! !